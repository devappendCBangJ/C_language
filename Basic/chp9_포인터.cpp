// ● 포인터 : 메모리 주소를 가진 변수
	// 1. 포인터
		// 1) 메모리 구조
			// - 변수 저장 in 메모리
			// - 메모리 바이트 단위 액세스
			// - 메모리 공간 차지 변화 by 변수 자료형

			// - 포인터 자료형 = 변수 자료형 일치 필수 ♣
			// - 포인터 주소 초기화 필수... NULL로 초기화 가능 ♣

		// 2) 포인터 기본
			// - 변수의 주소 : &변수
			// - 주소의 내용 : *주소
				// char *pc = &i : 변수 i의 주소에서 내용을 char로 읽는다
				// int *pi = &i : 변수 i의 주소에서 내용을 int로 읽는다
				// double *pd = &i : 변수 i의 주소에서 내용을 double로 읽는다

		// 3) 포인터 장점
			// 향상된 자료 구조 제작 가능
			// 참조에 의한 호출
			// 동적 메모리 할당

		// 4) 포인터 연산 : 증가, 감소, 덧셈, 뺄셈 등
			// - 대입 후 주소 증가 : v = *p++ ♣
			// - 대입 후 내용 증가 : v = (*p)++
			// - 주소 증가 후 대입 : v = *++p ♣
			// - 내용 증가 후 대입 : v = ++*p
			// ++연산 : 포인터 자료형 크기만큼 증가
				// char : 1
				// short : 2
				// int : 4
				// float : 4 ♣
				// double : 8

				// double *pc
				// pc = (double *)10000;
				// pc++;
				// >> pc = 10008 ♣

		// 5) 포인터 of 배열
			// - 배열 원소 주소 출력 : 배열 원소 주소 출력
				// int a[] = {10, 20, 30, 40, 50};
				// printf("%d", &a[1]); >> 1245012
			// - 배열 원소 출력 : 배열 원소 출력
				// int a[] = {10, 20, 30, 40, 50};
				// printf("%d", a[1]); >> 20
			// - 배열 자체 출력 : 배열 선두 주소 출력 ♣
				// int a[] = {10, 20, 30, 40, 50};
				// printf("%d", a); >> 1245008
			// - 포인터를 배열처럼 사용 ♣
				// int a[] = {10, 20, 30, 40, 50};
				// int *p = a;
					// >> *(p+0) = p[0] = a[0]
					// >> *(p+1) = p[1] = a[1]
					// >> *(p+2) = p[2] = a[2]...

				// 속도 : 포인터를 배열처럼 사용 > 인덱스 표기법

		// 6) 포인터 of 함수
			// 반환형 (*함수포인터 이름)(매개변수1, 매개변수2...);
			// 반환형 (*함수포인터 배열_이름[배열 크기])(매개변수1, 매개변수2...);

		// 7) 인수 전달
			// - 인수 전달 종류
				// 값에 의한 호출 : 값 복사 전달
				// 참조에 의한 호출 : 원본 주소 전달
			
			// - 인수 전달 in 함수
				// 일반 변수 : 변수 값 복사 전달
				// 배열 : 배열 주소 전달
				// 배열 원소 : 원소 값 복사 전달