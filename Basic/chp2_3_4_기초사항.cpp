// ● Visual Stuido
	// 1. Visual Studio 사용 순서
		// 1) 프로젝트 만들기 : 상단 파일 >> 새로 만들기 >> 프로젝트 >> 빈 프로젝트
		// 2) 소스 파일 만들기 : 솔루션 탐색기의 프로젝트 명 마우스 오른쪽 클릭 >> 추가 >> 새 항목 >> C++ 파일
		// 3) 콘솔 링크 : 상단 프로젝트 >> 속성 >> 링커 >> 시스템 >> 하위 시스템 >> 콘솔 선택
		// 4) 코드 작성
			// # include <헤더파일>

			// 함수 출력 타입 + 함수 이름(함수 인수) { ... 함수 내 인수 없는 경우 void
				// 함수 몸체
				// return 0; ... 함수 내 return 생략가능(0 = 성공, 1=실패 의미)
			// }

		// 5) 솔루션 빌드 = Ctrl+Shift+B : 상단 빌드 >> 솔루션 빌드
		// 5)디버그 하지 않고 시작 = Ctrl + F5 : 상단 디버그 >> 디버그 하지 않고 시작

	// 문장 < 함수 < 프로그램

	// ●코드 작성

		// 1. 헤더파일 포함 : #include <???.h>
			// 1) 구성
				// (1) #include : 소스 코드 안에 특정 파일을 현재 위치에 포함
				// (2) 헤더파일 : 컴파일러가 필요로 하는 정보 가진 파일
				// - stdio.h : standard input output 헤더파일(표준 입출력에 대한 라이브러리 함수 정의 포함)

		// 2. 줄바꿈 & 들여쓰기 : 가독성 향상

		// 2. 주석 : 프로그램에 대한 설명 + 가독성 향상
			// 1) 주석 종류
				// 한줄 전체 주석
				/* 별 사이 주석(별과 슬래시가 붙어있어야함) */
				/*
				별 사이 주석(별과 슬래시가 붙어있어야함)
				*/

		// 3. 변수 : 데이터 일시적으로 저장하는 메모리 공간. 값 변경 가능 공간
			// 1) 변수 선언 : 자료형 + 변수 이름 = (초기값);
				// - 자료형 : 데이터의 종류
					// (1) 목적 : 용도에 따른 메모리 관리
			
					// (2) 고려 사항
						// - 오버 플로우 : 변수 표현 범위 한계보다 큰 숫자 저장한 경우 >> 처음부터 다시 돌음 or 표현 불가
						// - 언더 플로우 : 변수 표현 범위 한계보다 작은 숫자 저장한 경우 >> 표현 불가

					// (3) 종류 : 
						// - 정수형 : short, int, long...
							// 부호 존재
								// short : 2바이트=16비트(-2^15 ~ 2^15 - 1)
								// int : 4바이트=32비트(-2^31 ~ 2^31 - 1)
								// long : 4바이트=32비트(-2^31 ~ 2^31 - 1)
							// 부호 없음
								// unsigned short : 2바이트=16비트(0 ~ 2^16 - 1)
								// unsigned int = unsigned : 4바이트=32비트(0 ~ 2^32 - 1)
								// unsigned long : 4바이트=32비트(0 ~ 2^32 - 1)
							// 부호 존재
								// char : 1바이트=8비트(-2^7 ~ 2^7 - 1)
							// 부호 없음
								// unsigned char : 1바이트=8비트(0 ~ 2^8 - 1)

						// - 실수형 : float, double, long double...
							// float : 4바이트=32비트(단일정밀도 부동소수점)
							// double : 8바이트=64비트(두배정밀도 부동소수점)
							// long double : 8바이트=64비트(두배확장정밀도 부동소수점)

							// - 표시 가능한 유효숫자 범위가 다르다

						// - 문자형 : char...
							// (1) 특징
								// - 공통 규격 : 아스키 코드(8비트) 통한 숫자 표현
								// - 컴퓨터보다는 인간에게 중요

							// (2) char 저장 : 아스키 코드 숫자 형태로 저장
								// char '문자'; : 문자를 아스키 코드 숫자로 변환하여 저장
								// char 숫자; : 숫자 그대로 저장

							// (3) char 사용 : 아스키 코드 대응 문자 or 숫자 출력
								// %c : 아스키 코드 대응 문자 출력
								// %d : 아스키 코드 대응 숫자 출력

							// (4) 제어 문자 : 인쇄 목적이 아닌, 제어 목적의 문자들
								// - 아스키 코드 직접 사용 ♣
									// printf("%c", 7);
								// - 이스케이프 시퀀스 사용 ♣
									// printf("%c", '\문자');
									// printf('\문자');
									// putchar('\문자');

									// \0 = 0 : 널문자(문자열 끝 표시)
									// \a = 7 : '삐' 경고 벨소리
									// \b = 8 : backspace(한 글자 앞 위치로)
									// \t = 9 : tab
									// \n = 10 : 줄 바꿈
									// \v = 11 : 수직 탭
									// \f = 12 : 폼 피드(주로 프린터에서 강제적 페이지 넘김)
									// \r = 13 : 캐리지 리턴(커서를 현재 라인 시작 위치로)
									// \" = 34 : 큰 따옴표
									// \' = 39 : 작은 따옴표
									// \\ = 92 : 역슬래시

						// - size of int : size_t ♣

				// - 식별자 : 변수나 함수의 이름
					// (1) 구성 : 영어 대문자, 영어 소문자, 숫자, _
					// (2) 주의 사항 : 
						// - 숫자로 시작 불가
						// - C언어 키워드와 같은 이름 불가. 기타 특수문자 사용 불가
							// - 키워드 = 예약어 : C언어에서 고유한 의미 가지는 특별한 단어 ♣
						// - 대문자와 소문자 구별

			// 2) 변수 사용
				// - 변수값 출력 형식 지정자
					// %o : 8진수 출력
					// %d : 10진수 출력
					// %u : 부호 없는 10진수 출력
					// %x : 16진수 출력
					// %숫자 + o or d or u or x or f : 숫자만큼의 칸 확보 ?진수 출력
					// %f : float형 출력
					// %정수.소수f : 정수만큼 칸 확보, 소수만큼 유효숫자 float형 출력
					// %lf : double형 출력
					// %e : float, double을 지수 형태 출력
					// %% : % 출력
					// %c : 문자 형태 출력
					// %s : 문자열 형태 

		// 3. 상수 : 값 변경 불가 공간
			// 1. 상수 종류
				// 1) 리터럴 상수 : 일반 상수
				// 2) 기호 상수 : 상수를 기호로 정의 ♣
					// - 장점
						// 가독성 향상
						// 값 손쉽게 변경 가능

					// - 사용법 :
						// #define 기호_상수명 + 값
						// const 자료형 + 기호_상수명 = 값;


		// 3. 기타 실수 표현
			// 1) 상수 자료형 명시 ♣
				// long : 숫자l or 숫자L
				// unsigned int : 숫자u or 숫자U
				// unsigned long : 숫자ul or 숫자UL

				// int x=10; : 10진수
				// int x=010; : 8진수
				// int x=0x10; : 16진수

			// 2) 실수 표현 방법 ♣
				// 1) 고정 소수점 방식 : 정수와 소수 부분에 일정 비트씩 할당 >> 아주 작은 수 or 아주 큰 수 표현 불가 in 과학 or 수학
				// 2) 부동 소수점 방식 : 표현 범위 대폭 증가(가수 부분 : 정밀도 표현, 지수부분 : 표현 범위 표현)

			// 3) 실수 유효한 표기법 예시 ♣
				// 1.23456
				// 2.
				// .28
				// .25f : 소수 아래 25번째까지 표시
				// 0e0
				// 2e+10
				// 1.23456e-3
				// 9.26E3
				// 9.26e3
				// 3.141592 : double형
				// 3.141592f : float형
 
		// 3. 수식 : 피연산자(변수, 상수), 연산자 등으로 구성된 식
			// 1) 기능에 따른 연산자 분류
				// (1) 대입 연산 = 배정 연산 = 할당 연산 : = ♣
					// - 항상, 왼쪽 변수 = 오른쪽 수식

					// - 복합 대입 연산자 ♣
						// x+=y : x = x + y
						// x-=y : x = x - y
						// x*=y : x = x * y
						// x/=y : x = x / y
						// x%=y : x = x % y
						// x&=y : x = x & y
						// x|=y : x = x | y
						// x^=y : x = x ^ y
						// x>>=y : x = x >> y
						// x<<=y : x = x << y
				// (2) 산술 연산 : + - * / %
					// - 거듭제곱 함수는 math.h 헤더파일 불러와야 사용 가능
					// - 나눗셈 연산자에서 정수끼리 나눗셈 >> 결과 : 정수형 생성(나머지값은 버림)
					// - 나눗셈 연산자에서 부동소수점끼리 나눗셈 >> 결과 : 부동소수점 생성
				// (3) 부호 : + -
				// (4) 증감 : ++ --
					// ++변수 : 증가 후 대입
					// --변수 : 감소 후 대입
					// 변수++ : 대입 후 증가
					// 변수-- : 대입 후 감소
				// (5) 관계 : == != > < >= <=
					// - 사용 : bool = (5 == 5) + (6 != 2) = 2
					// - 결과 : 참(1) or 거짓(0)
						// 출력 시 ♣
							// 0 : 거짓
							// 1 : 참
						// 입력 시 ♣
							// 0 : 거짓
							// 0 이외 전부 : 참
				// (6) 논리 : && || !
					// x && y : and 연산 (x, y가 모두 참일 때만 참)
						// ▶주의!!◀ ♣
							// && 연산자 단축 계산 : 첫 번째 피연산자가 거짓이면, 다른 피연산자들 실행x
					// x || y : or 연산 (x, y 둘중 하나만 참이면 참)
						// ▶주의!!◀ ♣
							// || 연산자 단축 계산 : 첫 번째 피연산자가 참이면, 다른 피연산자들 실행x
					// !x : not 연산 (x가 참이면 거짓, x가 거짓이면 참)

					// - 결과 : 참(1) or 거짓(0)
						// 출력 시
							// 0 : 거짓
							// 1 : 참
						// 입력 시
							// 0 : 거짓
							// 0 이외 : 참
				// (7) 조건 : ? ♣
					// x ? y : z

					// - 결과 : 
						// x가 참인 경우 : y
						// x가 거짓인 경우 : z
				// (8) 콤마 : , ♣
					// - 결과 : 순차적 계산
				// (9) 비트 단위 연산자 : & | ^ ~ << >> ♣
					// & : 비트단위 and (모두 1일때만 1)
						// 0110 & 1100 -> 0100
					// | : 비트단위 or (적어도 하나가 1이면 1)
						// 0110 | 1100 -> 1110
					// ^ : 비트단위 xor (같은 숫자면 0, 다른 숫자면 1) ♣
						// 0110 ^ 1100 -> 1010
					// ~ : 비트단위 not (1이면 0, 0이면 1) ♣
						// ~0110 -> 1001
					// << : 왼쪽으로 n비트 이동 (2의 n승 배) ♣
						// 1001<<2 -> 0100
					// >> : 오른쪽으로 n비트 이동 (2의 -n승 배) ♣
						// 1001>>2 -> 0010
				// (10) sizeof 연산자 : sizeof
				// (11) 형변환 : (type)변수 or 상수 ♣
					// ① 자동적 형변환
						// ⓐ 대입 연산 시 형변환
							// - 지정한 형식대로 올림 or 내림 변환
								// - 올림 변환 : double f = 10; >> f = 10.0
								// - 내림 변환 : int i = 3.141592; >> i = 3 // 반올림이 아닌 무조건 내림 변환 ♣
						// ⓑ 정수 연산 시 형변환
							// - int형 변환
								// - 내림 변환 : char형 or short형 >> int형 변환♣
						// ⓒ 수식 연산 시 형변환
							// - 항상 올림 변환
								// - 올림 변환 : int + double >> double
					// ② 명시적 형변환
						// (자료형)변수 or 상수
				// (12) 포인터 연산자 : * & []
				// (13) 구조체 연산자 : . ->

			// 2) 연산자 우선순위
				// 단항 > 산술 > 관계 > 논리 > 대입 > 콤마 ♣
					// (1) 단항 연산자
						// 1. () []
						// 2. sizeof &(주소) ++ -- ~ ! + - 형변환
					// (2) 이항 연산자
						// 산술
							// 1. * / %
							// 2. + -
						// 관계
							// 3. << >>
							// 4. < <= > >=
							// 5. == !=
							// 6. &
							// 7. ^
							// 8. |
					// (3) 삼항 연산자
						// 논리
							// 1. &&
							// 2. ||
							// 3. ?
						// 대입
							// 4. = += *= /= %= &= ^= |= <<= >>=
						// 콤마
							// 5. ,

			// - 피연산자 수에 따른 연산자 분류 ♣
				// 단항 연산자 : 피연산자 수 1개 ex) ++x; --y;
				// 이항 연산자 : 피연산자 수 2개 ex) x+y; x-y;
				// 삼항 연산자 : 연산자 수 3개 ex) x ? y : z;

		// ●진수 ♣
			// 2진수 >> 10진수 : 각 자리에 2의 배수 가중치 곱함
			// 2진수 >> 16진수 : 4자리씩 잘라서 변환
			// 16진수 >> 2진수 : 4자리씩 잘라서 변환
			// 16진수 >> 10진수 : 각 자리에 16의 배수 가중치 곱함
			// 10진수 >> 2진수 : 2로 나눌 수 없을때까지 나눠서 몫과 나머지 역순으로 모음
			// 10진수 >> 16진수 : 16으로 나눌 수 없을 때까지 나눠서 몫과 나머지 역순으로 모음

			// - BCD = 이진화 십진수 : 편의를 위해 손실을 감수하고 16진수를 10진수처럼 사용 ♣

		// 4. 함수 : 특정 작업을 위한 독립적 코드
			// 1) 함수 분류
				// (1) 라이브러리 함수 : 컴파일러가 제공하는 함수
				// (2) 사용자 정의 함수 : 직접 작성하는 함수

			// 2) 함수 사용
				// (1) 가장 먼저 실행되는 함수 : main()
				// (2) main문에서 함수 호출 : 기타 함수()
				// (3) 결과 반환 : return 0 or 1
					// 0 : 성공 ♣
					// 1 : 실패 ♣

			// 3) 함수 종류
				// ▶printf("인수(문자열)"); : 문자열 출력 함수
					// 인수 : 함수에게 전달하는 데이터
					// 문자열 : 문자들을 여러 개 나열한 것

				// ▶putchar('한 글자'); : 한 글자 출력 함수

				// ▶scanf_s("형식 지정자", &변수 이름); : 문자열 입력 함수
					// - 형식 지정자가 char인 경우 : &변수 이름, 바이트 숫자 이렇게 표시 ♣

				// ▶자료형의 크기 출력 : sizeof(상수 or 변수 or 자료형)

				// ▶시간 지연 함수 : Sleep(ms);
					// 1. 헤더파일 불러오기 : #include <Windows.h>
					// 2. 함수 사용 : Sleep(ms);

				// ▶산술 연산 함수 : 
					// 1. 헤더파일 불러오기 : #include <math.h>
					// 2. 함수 사용 : pow(x,y) 등

				// ▶키보드 타건 확인 함수 : _kbhit()
					// 1. 헤더파일 불러오기 : #include <conio.h>
					// 2. 함수 사용 : _kbhit()

				// ▶난수 함수 :
					// 1. 헤더파일 불러오기 : #include <stdlib.h>	
					// 2. 난수 섞기 srand(time(NULL));
					// 3. 난수 발생 rand();

		// 5. 오류 수정 및 디버깅
			// 1) 오류 분류
				// (1) 경고 : 경미한 오류
				// (2) 에러 : 심각한 오류

			// 2) 오류 분류2 ♣
				// (1) 컴파일 시간 오류 : 대부분 문법적인 오류
				// (2) 실행 시간 오류 : 대부분 연산 오류
				// (3) 논리 오류 : 논리적인 오류

				// (1-전) 에디터 : 소스 코드 작성
					// (1) 소스 파일(test.c) : 소스 코드가 들어있는 텍스트 파일(이것만 있으면 나머지는 아무때나 만들 수 있음)
				// (2-전) 컴파일러 : 소스 파일 >> 기계어 변환 ... ▶컴파일 시간 오류
					// (2) 오브젝트 파일(test.obj) : 기계어로 변환된 파일
				// (3-전) 링커 : 오브젝트 파일과 라이브러리 파일들을 연결 >> 하나의 실행 파일 생성
					// (3) 실행 파일(test.exe) : 실행 가능한 파일
				// (4-전) 로더 : 실행파일 불러옴
					// (4) 결과 ... ▶실행 시간 오류, 논리 오류

			// 3) 디버깅 : 논리 오류를 찾는 과정

		// 6. 명령창에서 프로그램 만들기 ♣
			// 1. 순서 : 
				// 1) 윈도우 검색창 열기
				// 2) Developer Command Prompt 실행
				// 3) 원하는 디렉터리 폴더로 이동
					// cd + 폴더명 : 폴더 이동
						// cd .. : 상위 폴더로 이동
					// md + 폴더명 : 폴더 생성
					// rd + 폴더명 : 폴더 삭제
					// dir : 폴더 검색 in 현재 위치
						// dir + 파일명.* : 파일 검색 in 현재 위치
						// del + 파일명.* : 파일 삭제 in 현재 위치
				// 4) 소스코드 메모장 만들기 : notepad 파일명.c
				// 5) 코드 작성
				// 6) 컴파일 : cl 파일명.c
				// 7) 실행 : .\파일명.exe