// ● 모듈 : 독립되어있는 프로그램의 일부분
	// 1. 모듈러 프로그래밍 : 모듈 개념 사용하는 프로그래밍 기법
	// 2. 모듈러 프로그래밍 장점
		// 1) 모듈 독자적 개발
		// 2) 모듈 독립적 변경
		// 3) 유지 보수 용이
		// 4) 모듈 재사용
	// 3. c언어의 모듈 = 함수

// ● 함수 : 특정 작업 수행하는 독립적 부분
	// 1. 함수 연결
		// 1) 프로그램 : 여러 개의 함수로 구성
		// 2) 함수 호출을 통해 서로서로 연결
		// 3) 처음 불러호는 함수 : main()
	// 2. 함수 종류
		// 1) 사용자 정의 함수 : 직접 제작 라이브러리
		// 2) 라이브러리 함수 : 컴파일러 제공 라이브러리
			// - 라이브러리 함수 종류
				// 표준 입출력
				// 수학
				// 문자열 처리
				// 시간 처리
				// 오류 처리
				// 데이터 검색과 정렬
				// 등등
	// 3. 함수 구조
		// 1) 반환형
		// 2) 함수 헤더(함수이름, 매개변수)
		// 3) 함수 몸체(내용, 반환값)
	// 4. 함수 호출 순서
		// 0) 함수 원형 생성, 함수 선언
			// - 컴파일러에게 함수에 대해 미리 알림
			// - 함수 호출 전 선언
			// - 헤더파일에 함수 원형 선언 ♣
			// - 링커가 실제 라이브러리 함수 정의를 붙임 ♣
			// - 매개변수 자료형은 두고, 매개변수 이름은 생략가능 ♣
		// 1) 함수 이름 호출
		// 2) 인수를 매개변수에 전달
			// - 인수 = 실 인수 = 실 매개변수
			// - 매개변수 = 형식인수 = 형식 매개변수
		// 3) 내용 순차적 실행
		// 4) 반환값 전달
			// - 함수 결과값 전달
			// - 입력(인수) 여러 개 가능 but 출력(반환값) 여러 개 불가
		// 5) 호출한 위치로 복귀

// ● 변수
	// 1. 변수 종류
		// 1) 지역변수 : 함수나 블록 안에 선언, 사용되는 변수
			// - 지역변수 구분 : {}
			// - 지역변수 초기값 = 쓰레기값 >> 초기화 필요
			// - 지역변수 이름 : 서로 다른 지역에서 같은 이름의 지역변수 사용 가능
			// - 지역변수 소멸 : 블록의 끝부분
		// 2) 전역변수 : 프로그램 전체에서 사용되는 변수
			// - 전역변수 초기값 = 0 ♣
			// - 전역변수 위치 : int main문 밖에 있는 가장 바깥 영역 ♣
			// - 전역변수 소멸 : 프로그램의 종료
		// 3) 지역변수, 전역변수 우선순위
			// 지역변수 > 전역변수

			// - 사용 주의 ♣
	// 2. 변수 생존 기간
		// 1) 생존기간 종류
			// - 정적할당 : 프로그램 실행 중 1번만 실행 후 계속 유지. 소멸x
			// - 자동할당 : 블록 들어갈 때 생성, 나올 때 소멸
		// 2) 생존기간 결정 요인
			// - 변수 선언 위치
			// - 저장 유형 지정자
				// auto : default RAM 자동할당
					// auto int sum = 0;
				// register : RAM이 아닌 CPU 레지스터 할당
					// register int sum = 0;
				// static : 정적할당
					// static int sum = 0;

					// - static 특징
						// 프로그램 실행 중 1번만 실행 후 계속 유지. 소멸 x ♣
				// extern : 외부할당
					// extern int sum = 0;

					// - extern 특징
						// 함수, 변수 모두에 사용 가능 ♣
						// 내부, 외부 파일 모두에서 사용 가능 ♣
	// 3. 연결 : 다른 범위에 존재하는 변수/함수들을 연결
		// 1) 연결 종류
			// - 외부 연결 : 서로 다른 소스 파일에서 변수/함수 공유 ♣
			// - 내부 연결 : 같은 소스 파일에서 변수/함수 공유 ♣
			// - 무연결 : 변수/함수 공유x ♣
				// static 지정자 사용
					// static 지정자 x : 외부 연결 허락 ♣
					// static 지정자 o : 외부 연결 불허 ♣
		// 2) 연결 특징
			// - 전역변수만 연결 가능

// ● 순환 : 알고리즘 or 함수가 자기 자신 다시 호출하여 문제 해결
	// 1. 순환 알고리즘 구조
		// 1) 순환 호출 시작 부분
		// 2) 순환 호출 정지 부분
	// 2. 순환과 반복의 차이
		// 1) 순환 : 순환 호출
			// - 장점 : 순환 문제 해결
			// - 주의 사항 : 수행 속도 느림. 함수 호출의 오버헤드(무한정 순환 불가)
		// 2) 반복 : for or while
			// - 장점 : 수행 속도 빠름
			// - 주의 사항 : 순환 문제 해결 어려움
		// 3) 대부분 순환 <-> 반복 바꾸어 사용 가능 ♣

		// - 순환 오류 주의 ♣