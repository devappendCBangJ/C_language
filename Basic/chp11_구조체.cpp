// ● 자료형 분류
	// 1. 기본 자료형 : char, int, float, double...
	// 2. 파생 자료형 : 배열, 열거형, 구조체, 공용체...

// ● 구조체
	// 1. 배열 vs 구조체
		// 1) 배열 : 같은 자료형 모음
		// 2) 구조체 : 서로 다른 자료형 모음

	// 2. 구조체 사용 순서
		// 1) 구조체 선언
			// struct 태그 {
			//	 자료형 멤버1;
			//	 자료형 멤버2;
			//	 struct 멤버3_구조체_변수; // 구조체를 멤버로 가지는 구조체
			//	 ...
			// };

			// - 주의사항 : 구조체 선언 뒤 세미콜론 필수 ♣
		// 2) 구조체 변수 선언
			// struct 태그 구조체_변수;
			// struct 태그 구조체_변수1, 구조체_변수2...;
			// 태그 구조체_변수;
			// 태그 구조체_변수1, 구조체_변수2...;

			// >> 자료형 = struct 태그
		// 2-1) 구조체 배열 선언
			// struct 태그 list[선언 개수]
			// 태그 구조체_변수 list[선언 개수]
		// 3) 구조체 초기화
			// struct 태그 구조체_변수명 = {멤버1 값, 멤버2 값, ...}
		// 3-1) 구조체 배열 초기화
			// struct 태그 list[선언 개수] = {{멤버1 값, 멤버2 값, ...}, {멤버1 값, 멤버2 값, ...}}
			// 태그 구조체_변수명 list[선언 개수] = {{멤버1 값, 멤버2 값, ...}, {멤버1 값, 멤버2 값, ...}}
		// 4) 구조체 멤버 참조
			// 변수.멤버
		// 5) 구조체 대입, 비교
			// - 같은 형태 구조체끼리 통째로 대입 가능 ♣
			// - 같은 형태 구조체끼리 통째로 비교 불가 ♣
			// - 같은 형태 구조체 원소끼리 비교 가능 ♣
		// 6) 구조체 포인터
			// struct student s = {1, "홍길동", 100};
			// struct student *p;
			// p = &s;
			// >> s.number = (*p).number = p->number

// ● 공용체
	// 1. 공용체 정의 : 같은 메모리 영역을 여러 개 변수가 공유
		// - 구조체와 사용법 비슷
	// 2. 공용체 사용 순서
		// 1) 공용체 선언

			// - 주의사항 : 구조체 선언 뒤 세미콜론 필수 ♣
		// 2) 공용체 변수 선언
		// 3) 공용체 초기화
		// 4) 공용체 멤버 참조
		// 5) 공용체 대입, 비교

// ● 열거형
	// 1. 열거형 정의 : 변수가 가질 수 있는 값 미리 열거해서 제한
	// 2. 열거형 사용 순서
		// 1) 열거형 선언
			// - 0부터 자동 번호 매기기
			// enum 태그 {값1, 값2, ...};
			// - 수동 번호 매기기
			// enum 태그 {값1=1, 값2, ...};
			// enum 태그 {값1, 값2=2, ...};

			// >> 0부터 시작, 수동 번호 뒤는 수동 번호 기준 +1씩 증가
		// 2) 열거형 변수 선언
			// enum 태그 열거형_변수명;
			// enum 태그 열거형_변수1명, 열거형_변수2명;
		// 3) 열거형 초기화
			// enum 태그 열거형_변수명 = 값(열거형 내에서 불러오기)
		// 4) 열거형 멤버 참조
			// 변수명

// ● typedef
	// 1. typedef 정의 : 새로운 자료형을 정의
	// 2. typedef 사용 순서
		// 1) typedef 선언
			// typedef 기존_자료형 새로운_자료형
		// 1-1) typedef 배열 선언
			// typedef 기존_자료형 list[선언 개수];
		// 2) typedef 사용
			// 새로운_자료형 변수명;
		// 2-1) typedef 배열 사용
	// 3. typedef와 #define 비교
		// - 이식성 향상(하드웨어 독립적 코드 생성)
		// - 서로 비슷한 효과
		// ex. #define UINT32 unsigned int
		// ex. typedef unsgined int UINT32
		// ex. typedef float VECTOR[2];
		// - 문서화 역할(주석 붙이는 것과 같은 역할)

// ip주소 ♣
	// little endian ; 거꾸로 저장
	// big endian : 순서대로 저장